{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"https://www.anapioficeandfire.com/api\";\nconst IceAndFireApi = {\n  getCharactersWithPagination: async (page, pageSize) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/characters`, {\n        params: {\n          page,\n          pageSize\n        }\n      });\n      const total = parseInt(response.headers[\"x-total-count\"], 10);\n      if (isNaN(total)) {\n        console.error(\"Invalid total count from API:\", response.headers[\"x-total-count\"]);\n        throw new Error(\"Invalid total count from API\");\n      }\n      return {\n        data: response.data,\n        total\n      };\n    } catch (error) {\n      console.error(\"Error fetching characters:\", error.message);\n      throw new Error(\"Error fetching characters. Please try again later.\");\n    }\n  },\n  getHousesWithPagination: async (page, pageSize) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/houses`, {\n        params: {\n          page,\n          pageSize\n        }\n      });\n      const total = parseInt(response.headers[\"x-total-count\"], 10);\n      if (isNaN(total)) {\n        console.error(\"Invalid total count from API:\", response.headers[\"x-total-count\"]);\n        throw new Error(\"Invalid total count from API\");\n      }\n      return {\n        data: response.data,\n        total\n      };\n    } catch (error) {\n      console.error(\"Error fetching houses:\", error.message);\n      throw new Error(\"Error fetching houses. Please try again later.\");\n    }\n  }\n};\nexport default IceAndFireApi;","map":{"version":3,"names":["axios","BASE_URL","IceAndFireApi","getCharactersWithPagination","page","pageSize","response","get","params","total","parseInt","headers","isNaN","console","error","Error","data","message","getHousesWithPagination"],"sources":["/home/eddie/Code/guided-capstone-project/src/services/IceAndFireApi.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = \"https://www.anapioficeandfire.com/api\";\n\nconst IceAndFireApi = {\n    getCharactersWithPagination: async (page, pageSize) => {\n        try {\n            const response = await axios.get(`${BASE_URL}/characters`, {\n                params: {\n                    page,\n                    pageSize,\n                },\n            });\n\n            const total = parseInt(response.headers[\"x-total-count\"], 10);\n\n            if (isNaN(total)) {\n                console.error(\"Invalid total count from API:\", response.headers[\"x-total-count\"]);\n                throw new Error(\"Invalid total count from API\");\n            }\n\n            return {\n                data: response.data,\n                total,\n            };\n        } catch (error) {\n            console.error(\"Error fetching characters:\", error.message);\n            throw new Error(\"Error fetching characters. Please try again later.\");\n        }\n    },\n\n    getHousesWithPagination: async (page, pageSize) => {\n        try {\n            const response = await axios.get(`${BASE_URL}/houses`, {\n                params: {\n                    page,\n                    pageSize,\n                },\n            });\n\n            const total = parseInt(response.headers[\"x-total-count\"], 10);\n\n            if (isNaN(total)) {\n                console.error(\"Invalid total count from API:\", response.headers[\"x-total-count\"]);\n                throw new Error(\"Invalid total count from API\");\n            }\n\n            return {\n                data: response.data,\n                total,\n            };\n        } catch (error) {\n            console.error(\"Error fetching houses:\", error.message);\n            throw new Error(\"Error fetching houses. Please try again later.\");\n        }\n    },\n};\n\nexport default IceAndFireApi;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uCAAuC;AAExD,MAAMC,aAAa,GAAG;EAClBC,2BAA2B,EAAE,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,KAAK;IACnD,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEN,QAAS,aAAY,EAAE;QACvDO,MAAM,EAAE;UACJJ,IAAI;UACJC;QACJ;MACJ,CAAC,CAAC;MAEF,MAAMI,KAAK,GAAGC,QAAQ,CAACJ,QAAQ,CAACK,OAAO,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC;MAE7D,IAAIC,KAAK,CAACH,KAAK,CAAC,EAAE;QACdI,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAER,QAAQ,CAACK,OAAO,CAAC,eAAe,CAAC,CAAC;QACjF,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;MACnD;MAEA,OAAO;QACHC,IAAI,EAAEV,QAAQ,CAACU,IAAI;QACnBP;MACJ,CAAC;IACL,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAACG,OAAO,CAAC;MAC1D,MAAM,IAAIF,KAAK,CAAC,oDAAoD,CAAC;IACzE;EACJ,CAAC;EAEDG,uBAAuB,EAAE,MAAAA,CAAOd,IAAI,EAAEC,QAAQ,KAAK;IAC/C,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAE,GAAEN,QAAS,SAAQ,EAAE;QACnDO,MAAM,EAAE;UACJJ,IAAI;UACJC;QACJ;MACJ,CAAC,CAAC;MAEF,MAAMI,KAAK,GAAGC,QAAQ,CAACJ,QAAQ,CAACK,OAAO,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC;MAE7D,IAAIC,KAAK,CAACH,KAAK,CAAC,EAAE;QACdI,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAER,QAAQ,CAACK,OAAO,CAAC,eAAe,CAAC,CAAC;QACjF,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;MACnD;MAEA,OAAO;QACHC,IAAI,EAAEV,QAAQ,CAACU,IAAI;QACnBP;MACJ,CAAC;IACL,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACG,OAAO,CAAC;MACtD,MAAM,IAAIF,KAAK,CAAC,gDAAgD,CAAC;IACrE;EACJ;AACJ,CAAC;AAED,eAAeb,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}